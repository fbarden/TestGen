from Tkinter import * 
from tkFileDialog   import asksaveasfilename

import SendCLI_v2_dialog

from tkMessageBox import askokcancel          

import os


class ScrolledText(Frame):
    def __init__(self, master=None, text='', file=None):
        Frame.__init__(self, master)
        self.pack(expand=YES, fill=BOTH)               
        self.makewidgets()
        self.settext(text, file)
    def makewidgets(self):
        sbar = Scrollbar(self)
        text = Text(self, relief=SUNKEN)
        sbar.config(command=text.yview)                  
        text.config(yscrollcommand=sbar.set)           
        sbar.pack(side=RIGHT, fill=Y)                   
        text.pack(side=LEFT, expand=YES, fill=BOTH)     
        self.text = text
    def settext(self, text='', file=None):
        if file: 
            text = open(file, 'r').read()
        self.text.delete('1.0', END)                   
        self.text.insert('1.0', text)                  
        self.text.mark_set(INSERT, '1.0')              
        self.text.focus()                                
    def gettext(self):                               
        return self.text.get('1.0', END+'-1c')         


class SimpleEditor(ScrolledText):                        
    def __init__(self, master=None, file=None): 
        frm = Frame(master)
        frm.pack(fill=X)

        menubar = Menu(master)      # Start - menu
        fileMenu = Menu(menubar, tearoff=0)
        editMenu = Menu(menubar, tearoff=0)

        menubar.add_cascade(label="  File    ", menu=fileMenu)
        fileMenu.add_separator()
        fileMenu.add_command(label="  New", command=self.onNew)
        fileMenu.add_command(label="  Open", command=self.onOpen)
        fileMenu.add_separator()
        fileMenu.add_command(label="  Save As", command=self.onSave)
        fileMenu.add_separator()
        fileMenu.add_command(label="  Exit", command=self.onExit)
        master.config(menu=menubar)

        menubar.add_cascade(label="  Edit     ", menu=editMenu)
        editMenu.add_command(label='  Cut',   command=self.onCut)
        editMenu.add_command(label='  Paste', command=self.onPaste)
        editMenu.add_command(label='  Find',  command=self.onFind)
        master.config(menu=menubar)

        Button(frm, text='SendCLI_v2',   command=self.onSendCLI).pack(side=LEFT)
        Button(frm, text='TSWConfig', command=self.onTSWConfig).pack(side=LEFT)
        Button(frm, text='TSWStatus',  command=self.onTSWStatus).pack(side=LEFT)
        ScrolledText.__init__(self, master, file=file) 
        self.text.config(font=('courier', 9, 'normal'))
    def onNew(self):                # NEW - clear the text area
        self.text.delete(0.0, END)
    def onOpen(self):                   # OPEN - file
        fileName = askopenfilename()
        try:
            file = open(fileName, 'r')
            contents = file.read()

            self.text.delete(0.0, END)
            self.text.insert(0.0, contents)
        except:
            pass
    def onSave(self):
        filename = asksaveasfilename()
        if filename:
            alltext = self.gettext()                      
            open(filename, 'w').write(alltext)          
    def onCut(self):
        text = self.text.get(SEL_FIRST, SEL_LAST)        
        self.text.delete(SEL_FIRST, SEL_LAST)           
        self.clipboard_clear()              
        self.clipboard_append(text)
    def onPaste(self):                                    
        try:
            text = self.selection_get(selection='CLIPBOARD')
            self.text.insert(INSERT, text)
        except TclError:
            pass                                      
    def onFind(self):
        target = askstring('SimpleEditor', 'Search String?')
        if target:
            where = self.text.search(target, INSERT, END)  
            if where:                                    
                print where
                pastit = where + ('+%dc' % len(target))   
               #self.text.tag_remove(SEL, '1.0', END)     
                self.text.tag_add(SEL, where, pastit)     
                self.text.mark_set(INSERT, pastit)         
                self.text.see(INSERT)                    
                self.text.focus()
    def onSendCLI(self):
        options = MyDialog(self.master)
        text = "SendCLI_v2.py " + options.CPE.get() + " -f " + options.interface.get() + options.command + "\n"
        self.text.insert(INSERT, text)
    def onTSWStatus(self):
        text = "TSWConfig.py"
        self.text.insert(INSERT, text)
    def onTSWConfig(self):
        text = "TSWStatus.py"
        self.text.insert(INSERT, text)
    def onExit(self):
        ans = askokcancel('Verify exit', "Really quit?")
        if ans: Frame.quit(self)


if __name__ == '__main__':
    sys.path.append('./view/')
    root = Tk()
    root.wm_title("Testcase Generator")
    try:
        editor = SimpleEditor(master=root, file=sys.argv[1])
	root.mainloop()
    except IndexError:
        editor = SimpleEditor(master=root)
	root.mainloop()

